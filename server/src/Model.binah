import Data.ByteString (ByteString)
import Data.Int (Int64)

Invitation
  code Text
  emailAddress Text
  firstName Text
  lastName Text
  institution Text
  accepted Bool
  emailStatus String
  emailError String Maybe

  UniqueInvitationEmailAddress emailAddress

  insert {\invitation viewer ->
    not (invitationAccepted invitation)
    && IsOrganizer viewer
    && invitationEmailStatus invitation == "not_sent"
  }

  update [ accepted ] {\old new _ ->
    not (invitationAccepted old) && invitationAccepted new
  }

  update [ emailStatus ] {\_ new viewer ->
      (invitationEmailStatus new == "sent" || invitationEmailStatus new == "error")
  }

User
  emailAddress Text
  password ByteString
  photoURL Text Maybe
  displayName Text
  institution Text
  pronouns Text
  website Text
  bio Text
  level String
  visibility String
  room RoomId Maybe

  UniqueUserEmailAddress emailAddress

  insert {\new viewer -> IsOrganizer viewer || userLevel new == "attendee"}

  read [ password ] @IsSelf
  read [ room ] {\user viewer ->
    userVisibility user == "public" || IsSelf user viewer
  }

  update [ password, level, emailAddress ] {\_ _ _ -> False}

  update [ photoURL, firstName, lastName, displayName, institution, room ] {\old _ viewer ->
    IsSelf old viewer
  }

Room
  color Text
  name Text
  topic Text
  zoomLink Text

  insert {\_ viewer -> IsOrganizer viewer}

  update [ topic ] {\old _ viewer -> IsInRoom viewer old}
  update [ name, capacity, zoomLink, topic ] {\_ _ viewer -> IsOrganizer viewer}

Message
  sender    UserId
  receiver  UserId Maybe
  message   Text
  timestamp Int64

MarkRead
  user      UserId
  upto      MessageId


policy IsInRoom = \viewer room ->
  userRoom viewer == Just (entityKey room)

policy IsSelf = \user viewer ->
  user == viewer

policy IsOrganizer = \user ->
  userLevel user == "organizer"
